// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: ghost/ghost.proto

package ghost

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Ghost_GetMatchInfo_FullMethodName   = "/ghost.Ghost/GetMatchInfo"
	Ghost_GetMatchStatus_FullMethodName = "/ghost.Ghost/GetMatchStatus"
)

// GhostClient is the client API for Ghost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GhostClient interface {
	GetMatchInfo(ctx context.Context, in *MatchInfoRequest, opts ...grpc.CallOption) (*MatchInfoResponse, error)
	GetMatchStatus(ctx context.Context, in *MatchStatusRequest, opts ...grpc.CallOption) (*MatchStatusResponse, error)
}

type ghostClient struct {
	cc grpc.ClientConnInterface
}

func NewGhostClient(cc grpc.ClientConnInterface) GhostClient {
	return &ghostClient{cc}
}

func (c *ghostClient) GetMatchInfo(ctx context.Context, in *MatchInfoRequest, opts ...grpc.CallOption) (*MatchInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MatchInfoResponse)
	err := c.cc.Invoke(ctx, Ghost_GetMatchInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ghostClient) GetMatchStatus(ctx context.Context, in *MatchStatusRequest, opts ...grpc.CallOption) (*MatchStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MatchStatusResponse)
	err := c.cc.Invoke(ctx, Ghost_GetMatchStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GhostServer is the server API for Ghost service.
// All implementations must embed UnimplementedGhostServer
// for forward compatibility.
type GhostServer interface {
	GetMatchInfo(context.Context, *MatchInfoRequest) (*MatchInfoResponse, error)
	GetMatchStatus(context.Context, *MatchStatusRequest) (*MatchStatusResponse, error)
	mustEmbedUnimplementedGhostServer()
}

// UnimplementedGhostServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGhostServer struct{}

func (UnimplementedGhostServer) GetMatchInfo(context.Context, *MatchInfoRequest) (*MatchInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchInfo not implemented")
}
func (UnimplementedGhostServer) GetMatchStatus(context.Context, *MatchStatusRequest) (*MatchStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchStatus not implemented")
}
func (UnimplementedGhostServer) mustEmbedUnimplementedGhostServer() {}
func (UnimplementedGhostServer) testEmbeddedByValue()               {}

// UnsafeGhostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GhostServer will
// result in compilation errors.
type UnsafeGhostServer interface {
	mustEmbedUnimplementedGhostServer()
}

func RegisterGhostServer(s grpc.ServiceRegistrar, srv GhostServer) {
	// If the following call pancis, it indicates UnimplementedGhostServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Ghost_ServiceDesc, srv)
}

func _Ghost_GetMatchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GhostServer).GetMatchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ghost_GetMatchInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GhostServer).GetMatchInfo(ctx, req.(*MatchInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ghost_GetMatchStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GhostServer).GetMatchStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ghost_GetMatchStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GhostServer).GetMatchStatus(ctx, req.(*MatchStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ghost_ServiceDesc is the grpc.ServiceDesc for Ghost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ghost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ghost.Ghost",
	HandlerType: (*GhostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMatchInfo",
			Handler:    _Ghost_GetMatchInfo_Handler,
		},
		{
			MethodName: "GetMatchStatus",
			Handler:    _Ghost_GetMatchStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ghost/ghost.proto",
}
