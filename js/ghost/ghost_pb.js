// source: ghost/ghost.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.ghost.CS2MatchInfoResponse', null, global);
goog.exportSymbol('proto.ghost.Dota2MatchInfoResponse', null, global);
goog.exportSymbol('proto.ghost.MatchInfoRequest', null, global);
goog.exportSymbol('proto.ghost.MatchInfoResponse', null, global);
goog.exportSymbol('proto.ghost.MatchInfoResponse.MatchInfoCase', null, global);
goog.exportSymbol('proto.ghost.MatchStatus', null, global);
goog.exportSymbol('proto.ghost.MatchStatusRequest', null, global);
goog.exportSymbol('proto.ghost.MatchStatusResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ghost.MatchInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ghost.MatchInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ghost.MatchInfoRequest.displayName = 'proto.ghost.MatchInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ghost.MatchInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ghost.MatchInfoResponse.oneofGroups_);
};
goog.inherits(proto.ghost.MatchInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ghost.MatchInfoResponse.displayName = 'proto.ghost.MatchInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ghost.CS2MatchInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ghost.CS2MatchInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ghost.CS2MatchInfoResponse.displayName = 'proto.ghost.CS2MatchInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ghost.Dota2MatchInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ghost.Dota2MatchInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ghost.Dota2MatchInfoResponse.displayName = 'proto.ghost.Dota2MatchInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ghost.MatchStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ghost.MatchStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ghost.MatchStatusRequest.displayName = 'proto.ghost.MatchStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ghost.MatchStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ghost.MatchStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ghost.MatchStatusResponse.displayName = 'proto.ghost.MatchStatusResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ghost.MatchInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ghost.MatchInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ghost.MatchInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ghost.MatchInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
matchUrn: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ghost.MatchInfoRequest}
 */
proto.ghost.MatchInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ghost.MatchInfoRequest;
  return proto.ghost.MatchInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ghost.MatchInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ghost.MatchInfoRequest}
 */
proto.ghost.MatchInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchUrn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ghost.MatchInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ghost.MatchInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ghost.MatchInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ghost.MatchInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchUrn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string match_urn = 1;
 * @return {string}
 */
proto.ghost.MatchInfoRequest.prototype.getMatchUrn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ghost.MatchInfoRequest} returns this
 */
proto.ghost.MatchInfoRequest.prototype.setMatchUrn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ghost.MatchInfoResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.ghost.MatchInfoResponse.MatchInfoCase = {
  MATCH_INFO_NOT_SET: 0,
  CS2: 1,
  DOTA2: 2
};

/**
 * @return {proto.ghost.MatchInfoResponse.MatchInfoCase}
 */
proto.ghost.MatchInfoResponse.prototype.getMatchInfoCase = function() {
  return /** @type {proto.ghost.MatchInfoResponse.MatchInfoCase} */(jspb.Message.computeOneofCase(this, proto.ghost.MatchInfoResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ghost.MatchInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ghost.MatchInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ghost.MatchInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ghost.MatchInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
cs2: (f = msg.getCs2()) && proto.ghost.CS2MatchInfoResponse.toObject(includeInstance, f),
dota2: (f = msg.getDota2()) && proto.ghost.Dota2MatchInfoResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ghost.MatchInfoResponse}
 */
proto.ghost.MatchInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ghost.MatchInfoResponse;
  return proto.ghost.MatchInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ghost.MatchInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ghost.MatchInfoResponse}
 */
proto.ghost.MatchInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ghost.CS2MatchInfoResponse;
      reader.readMessage(value,proto.ghost.CS2MatchInfoResponse.deserializeBinaryFromReader);
      msg.setCs2(value);
      break;
    case 2:
      var value = new proto.ghost.Dota2MatchInfoResponse;
      reader.readMessage(value,proto.ghost.Dota2MatchInfoResponse.deserializeBinaryFromReader);
      msg.setDota2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ghost.MatchInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ghost.MatchInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ghost.MatchInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ghost.MatchInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCs2();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ghost.CS2MatchInfoResponse.serializeBinaryToWriter
    );
  }
  f = message.getDota2();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ghost.Dota2MatchInfoResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional CS2MatchInfoResponse cs2 = 1;
 * @return {?proto.ghost.CS2MatchInfoResponse}
 */
proto.ghost.MatchInfoResponse.prototype.getCs2 = function() {
  return /** @type{?proto.ghost.CS2MatchInfoResponse} */ (
    jspb.Message.getWrapperField(this, proto.ghost.CS2MatchInfoResponse, 1));
};


/**
 * @param {?proto.ghost.CS2MatchInfoResponse|undefined} value
 * @return {!proto.ghost.MatchInfoResponse} returns this
*/
proto.ghost.MatchInfoResponse.prototype.setCs2 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ghost.MatchInfoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ghost.MatchInfoResponse} returns this
 */
proto.ghost.MatchInfoResponse.prototype.clearCs2 = function() {
  return this.setCs2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ghost.MatchInfoResponse.prototype.hasCs2 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Dota2MatchInfoResponse dota2 = 2;
 * @return {?proto.ghost.Dota2MatchInfoResponse}
 */
proto.ghost.MatchInfoResponse.prototype.getDota2 = function() {
  return /** @type{?proto.ghost.Dota2MatchInfoResponse} */ (
    jspb.Message.getWrapperField(this, proto.ghost.Dota2MatchInfoResponse, 2));
};


/**
 * @param {?proto.ghost.Dota2MatchInfoResponse|undefined} value
 * @return {!proto.ghost.MatchInfoResponse} returns this
*/
proto.ghost.MatchInfoResponse.prototype.setDota2 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ghost.MatchInfoResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ghost.MatchInfoResponse} returns this
 */
proto.ghost.MatchInfoResponse.prototype.clearDota2 = function() {
  return this.setDota2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ghost.MatchInfoResponse.prototype.hasDota2 = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ghost.CS2MatchInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ghost.CS2MatchInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ghost.CS2MatchInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ghost.CS2MatchInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
mapName: jspb.Message.getFieldWithDefault(msg, 2, ""),
mapAssetName: jspb.Message.getFieldWithDefault(msg, 3, ""),
gameVersion: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ghost.CS2MatchInfoResponse}
 */
proto.ghost.CS2MatchInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ghost.CS2MatchInfoResponse;
  return proto.ghost.CS2MatchInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ghost.CS2MatchInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ghost.CS2MatchInfoResponse}
 */
proto.ghost.CS2MatchInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMapName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMapAssetName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ghost.CS2MatchInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ghost.CS2MatchInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ghost.CS2MatchInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ghost.CS2MatchInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMapName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMapAssetName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGameVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string map_name = 2;
 * @return {string}
 */
proto.ghost.CS2MatchInfoResponse.prototype.getMapName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ghost.CS2MatchInfoResponse} returns this
 */
proto.ghost.CS2MatchInfoResponse.prototype.setMapName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string map_asset_name = 3;
 * @return {string}
 */
proto.ghost.CS2MatchInfoResponse.prototype.getMapAssetName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ghost.CS2MatchInfoResponse} returns this
 */
proto.ghost.CS2MatchInfoResponse.prototype.setMapAssetName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string game_version = 4;
 * @return {string}
 */
proto.ghost.CS2MatchInfoResponse.prototype.getGameVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ghost.CS2MatchInfoResponse} returns this
 */
proto.ghost.CS2MatchInfoResponse.prototype.setGameVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ghost.Dota2MatchInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ghost.Dota2MatchInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ghost.Dota2MatchInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ghost.Dota2MatchInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
gameVersion: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ghost.Dota2MatchInfoResponse}
 */
proto.ghost.Dota2MatchInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ghost.Dota2MatchInfoResponse;
  return proto.ghost.Dota2MatchInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ghost.Dota2MatchInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ghost.Dota2MatchInfoResponse}
 */
proto.ghost.Dota2MatchInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ghost.Dota2MatchInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ghost.Dota2MatchInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ghost.Dota2MatchInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ghost.Dota2MatchInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string game_version = 2;
 * @return {string}
 */
proto.ghost.Dota2MatchInfoResponse.prototype.getGameVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ghost.Dota2MatchInfoResponse} returns this
 */
proto.ghost.Dota2MatchInfoResponse.prototype.setGameVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ghost.MatchStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ghost.MatchStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ghost.MatchStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ghost.MatchStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
matchUrn: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ghost.MatchStatusRequest}
 */
proto.ghost.MatchStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ghost.MatchStatusRequest;
  return proto.ghost.MatchStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ghost.MatchStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ghost.MatchStatusRequest}
 */
proto.ghost.MatchStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatchUrn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ghost.MatchStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ghost.MatchStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ghost.MatchStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ghost.MatchStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchUrn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string match_urn = 1;
 * @return {string}
 */
proto.ghost.MatchStatusRequest.prototype.getMatchUrn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ghost.MatchStatusRequest} returns this
 */
proto.ghost.MatchStatusRequest.prototype.setMatchUrn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ghost.MatchStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ghost.MatchStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ghost.MatchStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ghost.MatchStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
matchStatus: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ghost.MatchStatusResponse}
 */
proto.ghost.MatchStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ghost.MatchStatusResponse;
  return proto.ghost.MatchStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ghost.MatchStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ghost.MatchStatusResponse}
 */
proto.ghost.MatchStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ghost.MatchStatus} */ (reader.readEnum());
      msg.setMatchStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ghost.MatchStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ghost.MatchStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ghost.MatchStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ghost.MatchStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMatchStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional MatchStatus match_status = 1;
 * @return {!proto.ghost.MatchStatus}
 */
proto.ghost.MatchStatusResponse.prototype.getMatchStatus = function() {
  return /** @type {!proto.ghost.MatchStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ghost.MatchStatus} value
 * @return {!proto.ghost.MatchStatusResponse} returns this
 */
proto.ghost.MatchStatusResponse.prototype.setMatchStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.ghost.MatchStatus = {
  MATCH_STATUS_UNKNOWN: 0,
  MATCH_STATUS_AVAILABLE: 1,
  MATCH_STATUS_UNAVAILABLE: 2
};

goog.object.extend(exports, proto.ghost);
